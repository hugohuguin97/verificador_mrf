"""Subclass of MainF, which is generated by wxFormBuilder."""
# RAMA DE DESARROLLO
import wx
import src.main_app as main_app

import os
import wx.xrc as xrc
import wx.adv as adv
import wx.richtext as rt
import  wx.html
from os import path
import logging
import wx.lib.scrolledpanel
import wx.lib.agw.aui as aui
from glob import glob

from threading import Thread
import subprocess

from src.val_MAGE import MAGE_panel
from src.val_XML import XML_panel
from src.val_RAW import RAW_panel
from src.threads import EVT_RESULT_ID
from shutil import copyfile, rmtree, move

ruta_base = path.dirname(path.abspath(__file__))
ruta_xrc = path.join(ruta_base,"main_app.xrc")
log = logging.getLogger("validaciones_uso")
log.setLevel(logging.INFO)

def EVT_RESULT(win, func):
    """Define Result Event."""
    win.Connect(-1, -1, EVT_RESULT_ID, func)


# Implementing MainF
class MainFrameMainF( main_app.MainF ):
    def __init__( self, parent ):
        main_app.MainF.__init__( self, parent )
        self.worker = None
        
        self.estado_ayuda = 0
        self.ruta_base = ruta_base
        
        # Agrega figuras al menu
        icons_path = path.join(ruta_base, "iconos")
        file_bm = path.join(icons_path,"archivo.png")
        open_bm = path.join(icons_path,"abrir.png")
        exit_bm = path.join(icons_path,"exit.png")
        info_bm = path.join(icons_path,"info.png")
        self.m_menu_file_new.SetBitmap(wx.Bitmap( file_bm, wx.BITMAP_TYPE_ANY ))
        self.m_menu_file_open.SetBitmap(wx.Bitmap( open_bm, wx.BITMAP_TYPE_ANY ))
        self.m_menu_file_exit.SetBitmap(wx.Bitmap( exit_bm, wx.BITMAP_TYPE_ANY ))
        self.introduccion.SetBitmap(wx.Bitmap( info_bm, wx.BITMAP_TYPE_ANY ))
        self.queries.SetBitmap(wx.Bitmap( info_bm, wx.BITMAP_TYPE_ANY ))
        
        
        self.Bind(wx.EVT_MENU, lambda event: self.abrir_ayuda(event, "instrucciones.html"), self.introduccion)
        self.Bind(wx.EVT_MENU, lambda event: self.abrir_ayuda(event, "queries.html"), self.queries)

        self.mage_panel = MAGE_panel(self, self)
        self.xml_panel = XML_panel(self, self)
        self.raw_panel = RAW_panel(self, self)
        
        # self.archivos_requeridos = set()
        EVT_RESULT(self, self.ThreadResult)

    def abrir_ayuda(self, event, archivo):
        """Abre un archivo html de ayuda en una nueva ventana.

        Para que la funcion fuese generica y evitar la repetición del codigo, en
        la llamda se aplicó una función lambda para poder añadir un parámetro
        adicional, en este caso es el nombre del archivo html que se desea
        desplegar.

        Parameters
        ----------
        archivo: str
            Nombre del archivo html que se desea abrir en la ventana
        """
        if self.estado_ayuda == 0:
            frame = AyudaFrame(wx.GetTopLevelParent(self), u"Ayuda", archivo, self)
        else:
            self.SetStatusText(u'Ya hay una ventana de ayuda abierta')

    def inicializar_thread(self, event, thread, comentario):
        """Inicializa un thread"""
        if self.worker is None:
            self.SetStatusText(comentario)
            self.worker = thread()
            self.worker.start()
        else:
            self.SetStatusText('Proceso ocupado, espere a finalizar el anterior.')

    def ThreadResult(self, event):

        # print(event.completed)
        # print(event.data)
        
        if event.completed is None:
            self.SetStatusText('La actividad fue abortada')

        # elif event.completed is True:
        #     self.SetStatusText(u'Terminó la actividad')
        #     if event.data and event.data['ACTIVIDAD'] == 'VERIFICADOR':
        #         self._carpeta_final = event.data['CARPETA_FINAL']
        #         self._val_ejecutado = True
        #         self._validaciones = event.data['VALIDACIONES']
        #         if self._modo.GetSelection() == 1:
        #             self.mainPanel._upload.Enable()
        #         elif (self._modo.GetSelection() == 0 or self._modo.GetSelection() == 3):
        #             self.mainPanel._upload_2.Enable()
        #     elif event.data and event.data['ACTIVIDAD'] == 'UPDATER':
        #         self._current_sha = event.data['SHA_FINAL']
        #     elif event.data and event.data['ACTIVIDAD'] == 'UPLOADER_PRUEBA':

        #         log.info('Limpiando directorio temporal')
        #         try:
        #             rmtree(event.data['CARPETA_TEMPORAL'])
        #         except:
        #             pass
        #         log.info('Termino la limpieza del directorio temporal')
        #     elif event.data and event.data['ACTIVIDAD'] == 'READ_EXT':

        #         self.mainPanel._start.Enable()
        #         self.mainPanel._upoload_mongo.Enable()

        elif event.completed is False:
            self.SetStatusText(u'Ocurrió un error')

        if event.data and event.data['ACTIVIDAD'] == 'VERIFICADOR':
            self._verificado = True

        self.worker = None
            
class AyudaFrame(wx.Frame):
    """Clase que permite abrir una ventana de ayuda desde la ventana principal"""
    def __init__(self, parent, title, archivo, main_frame):
        wx.Frame.__init__(self, parent,-1, title, size = (600,400))
        # Use current window as container of the Html Frame
        self.mf = main_frame
        self.mf.estado_ayuda = 1
        self.html = wx.html.HtmlWindow(self)
        self.html.LoadPage(path.join(self.mf.ruta_base, "ayuda", archivo))
        self.Bind(wx.EVT_CLOSE, self.on_close)
        self.Show()
        self.Maximize()

    def on_close(self, event):
        """Metodo de destruccion de la ayuda"""

        self.mf.estado_ayuda = 0
        self.Destroy()
    
class App(wx.App):
    def OnInit(self):
        self.locale = wx.Locale(wx.LANGUAGE_ENGLISH)
        frame = MainFrameMainF(None)
        frame.Show(True)
        frame.Maximize(True)
        return True
    
if __name__ == '__main__':
    # main()
    app = App()
    # frame = MainWindow(None)
    app.MainLoop()